# Liars' Dice Probability Watch App – Product Requirements Document (PRD)

## 1. Overview

**Purpose:**  
Enable players of Liars' Dice to quickly assess the probability of current bids on the fly using their Apple Watch—displaying both bid likelihood and break-even threshold.   This app delivers instant bid probability (for up to 40 dice) and break-even guidance, all in a simple two-step, Crown-driven watch interface enhanced with intuitive arrow navigation—designed to be fast, clear, and reliable during actual gameplay.

**Goals:**  
- Fast, intuitive input via Crown + tappable transitions  
- Immediate probability output—no computing delays  
- Clear visual cues (color-coded)  
- Lightweight and reliable for wrist-based use

---

## 2. Key Features

### Two-Screen Navigation

**Screen 1 – Select Total Dice**  
- Header (small): `Dice in Play`  
- Large number (1–40) for dice count, adjusted via Digital Crown  
- Large tappable **right-arrow icon** on right edge to transition to Screen 2

**Screen 2 – Bid Probability View**  
- Header (small): `Break‑even: K₀` (highest bid with P ≥ 50%)  
- Center display shows:  
  - Large **current bid (k)** adjustable via Crown  
  - Prominent **probability %**, color-coded:  
    - Green (P ≥ 50%)  
    - Yellow (30% ≤ P < 50%)  
    - Red (P < 30%)  
- Large tappable **left-arrow icon** on left edge to return to Screen 1

---

## 3. Probability Engine

- **Precomputed lookup table** of P(k | n) = ∑ₓ₌ₖⁿ C(n, x) (1/6)ˣ (5/6)ⁿ⁻ˣ  
  - Supports n ≤ 40, 0 ≤ k ≤ n  
- **Break-even bid (K₀):** maximum k where P ≥ 50%  
- No variants or wilds in initial version

---

## 4. UI & Interaction Design

- **Dark background** for readability & battery efficiency  
- **Font:** watchOS system (SF)  
  - Small header, bold large numbers for bid and percentage  
- **Color-coded probability**  
- Clear arrow icons for navigation  
- Onboarding overlay (on first launch) explains Crown + tap use

---

## 5. User Flow

1. Launch → **Screen 1**  
2. Adjust dice count (n) via Crown  
3. Tap **→** right-arrow → navigate to **Screen 2**  
4. View break-even and probability; rotate Crown to adjust k  
5. Tap **←** left-arrow → return to **Screen 1**

---

## 6. Tech Requirements

- **Platform:** watchOS (initially wrist-only)  
- **Data:** ~1600 precomputed float values (lookup table)  
- **Storage:** <50 KB  
- **Performance:** <50 ms lookup/UI update

### Development Resources & Documentation

**Apple Official Documentation:**
- [watchOS App Programming Guide](https://developer.apple.com/documentation/watchos) - Core watchOS development
- [SwiftUI for watchOS](https://developer.apple.com/documentation/swiftui/watchos) - UI framework
- [Digital Crown Programming Guide](https://developer.apple.com/documentation/watchkit/digital_crown) - Crown integration
- [watchOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/watchos) - Design principles
- [Apple Watch App Development](https://developer.apple.com/documentation/watchos/apps) - App development concepts
- [watchOS App Architecture](https://developer.apple.com/documentation/watchos/apps/architecting_your_watchos_app) - Recommended structure
- [watchOS Performance](https://developer.apple.com/documentation/watchos/apps/optimizing_your_watchos_app) - Optimization guidelines

**Mathematical & Algorithm Resources:**
- [Binomial Distribution](https://en.wikipedia.org/wiki/Binomial_distribution) - Mathematical foundation
- [Cumulative Binomial Probability](https://en.wikipedia.org/wiki/Binomial_distribution#Cumulative_distribution_function) - CDF calculations
- [Swift Numerics](https://github.com/apple/swift-numerics) - Apple's numerical computing library
- [Accelerate Framework](https://developer.apple.com/documentation/accelerate) - High-performance math functions

**UI/UX Design Resources:**
- [Apple Watch Design Guidelines](https://developer.apple.com/design/human-interface-guidelines/watchos/overview/design-principles) - Design principles
- [watchOS Color Guidelines](https://developer.apple.com/design/human-interface-guidelines/watchos/visual-design/color) - Color usage
- [watchOS Typography](https://developer.apple.com/design/human-interface-guidelines/watchos/visual-design/typography) - Typography guidelines
- [watchOS Accessibility](https://developer.apple.com/documentation/watchos/apps/accessibility) - Accessibility features

**Development Tools:**
- [Xcode Documentation](https://developer.apple.com/documentation/xcode) - IDE documentation
- [Swift Documentation](https://developer.apple.com/documentation/swift) - Swift language reference
- [SwiftUI Documentation](https://developer.apple.com/documentation/swiftui) - SwiftUI framework
- [watchOS Testing](https://developer.apple.com/documentation/xcode/testing-your-apps-in-xcode) - Testing guidelines

**App Store & Distribution:**
- [App Store Review Guidelines](https://developer.apple.com/app-store/review/guidelines/) - Submission requirements
- [watchOS App Store](https://developer.apple.com/documentation/watchos/apps/distributing_your_watchos_app) - Distribution guide
- [App Store Connect](https://developer.apple.com/documentation/appstoreconnect) - App management

**Learning Resources:**
- [Apple Developer Tutorials](https://developer.apple.com/tutorials) - Official tutorials
- [WWDC Sessions](https://developer.apple.com/videos/) - Conference videos
- [Apple Developer Forums](https://developer.apple.com/forums/) - Community support

---

## 7. Edge Cases & Validation

- n < 6 handled gracefully (probabilities correct)  
- k ranges from 0 to n  
- Minimum n is 1; invalid values disallowed  
- Percentages rounded to nearest whole number (0–100%) 